from api import general
from database.bd_history import history_output, get_entry
from handlers.custom_heandlers.high_low_best import send_result
from loader import bot
from hotlog import hotels_log
from states.request_data import History
from keyboards.inline.keyboard import hotels_history


@bot.message_handler(commands=['history'])
def bot_history(message) -> None:
    """
    –ª–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—É history
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    bot.set_state(message.from_user.id, History.select_search, message.chat.id)
    try:

        history_output_data = history_output(message.from_user.id)
        if history_output_data:

            # history_output_text = []
            #
            # for entry in history_output_data:
            #     history_output_text.append(
            #         f'*{entry[7]}*. –ü–æ–∏—Å–∫ –≤ –≥–æ—Ä–æ–¥–µ *{entry[2]}*. '
            #         f'–° *{entry[3]}* –ø–æ *{entry[4]}*. '
            #         f'–û—Ç–µ–ª–µ–π –≤ –≤—ã–¥–∞—á–µ  *{entry[5]}*, —Å *{entry[6]}* —à—Ç.
            #         —Ñ–æ—Ç–æ')

            history_output_text = {}

            for entry in history_output_data:
                num_counts = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£',
                              '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
                text_value = f'{num_counts[int(entry[7])-1]} {entry[2]}.\n' \
                             f'{entry[3]}-{entry[4]}. ' \
                             f'(–û—Ç–µ–ª–µ–π: {entry[5]}, —Ñ–æ—Ç–æ: {entry[6]})'
                history_output_text.update({entry[7]: text_value})

            # history_output_text = '\n'.join(history_output_text)
            bot.set_state(message.from_user.id, History.selection_processing,
                          message.chat.id)
            # print(history_output_text)
            bot.send_message(message.from_user.id, '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:',
                             reply_markup=hotels_history(history_output_text))

        else:
            bot.send_message(message.from_user.id,
                             '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')

    except Exception as e:
        hotels_log.logger.exception(e)
        bot.send_message(message.from_user.id, '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')


@bot.callback_query_handler(func=lambda call: True,
                            state=History.selection_processing)
def get_selection_processing(call) -> None:
    """
    –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å—É
    :param call: –æ—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: (None)
    """
    try:
        select_entry = get_entry(call.from_user.id, call.data)
        with bot.retrieve_data(call.from_user.id,
                               call.message.chat.id) as data:
            for entry in select_entry:
                data['user_id'] = entry[0]
                data['command'] = entry[1]
                data['city'] = entry[2]
                data['check_in'] = entry[3]
                data['check_out'] = entry[4]
                data['number_hotels'] = int(entry[5])
                data['number_photos'] = int(entry[6])
                data['history'] = True

            number_photos = data['number_photos']
            text = f'–ò—â—É –æ—Ç–µ–ª–∏ –¥–ª—è –í–∞—Å –≤ –≥–æ—Ä–æ–¥–µ *{data["city"]}* ' \
                   f'—Å *{data["check_in"]}* –ø–æ *{data["check_out"]}*, ' \
                   f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π *{data["number_hotels"]}*, ' \
                   f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π *{data["number_photos"]}*. ' \
                   f'–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-5 –º–∏–Ω—É—Ç...'

            bot.send_message(call.from_user.id, text, parse_mode="Markdown")
            general_response = general.general(data)

        send_result(call, general_response, number_photos)

    except Exception as e:
        hotels_log.logger.exception(e)
